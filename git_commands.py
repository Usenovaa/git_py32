'''GIT'''
# распределенная система контроля версий (система, записывающая изменения в файле или наборе файлов). Используется для отслеживания и ведения истории изменения файлов, позволяет вернуть старую версию кода

'''GitHub'''
# онлайн сервис - который предоставляет услуги по хранению репозиториев и управлению доступом
# (аналоги GitLab, Bitbucket)


'''Команды (порядок первой отправки на github)'''
# 1. git init -> первращает директорию в git репозиторий (инициализируете директорию и пояевляется скрытая директория .git) вводится только один раз

# 2. git add .(все содержимое директории)/ <filaname> (конкретный файл git add test.py) -> отслеживание файлов или файла gitом 

# 3. git commit -m 'message' -> создание коммита с коментарием, сохранение в git (локально на компе)

# 4. git remote add <название_связи> (обычно origin) ссылка_на_удаленный_рапозиторий (HTTPS/SSH) -> связываем локальный репозиторий с удаленным

# 5. git push <название_связи> <название_ветки> (master/main) -> оправкаверсии колда на удаленный репозиторий (в github репозиторий)


'''команды при повторной отпраке на github (внесли изменения в файл)'''
# git add .
# git commit -m 'message'
# git push origin master



'''==================='''
# git log -> просмотр журнала с коммитами 
# git checkout <hash_commit> -> переключится к другому коммиту (версии кода)
# git status -> проверка статуса файлов
# git pull <название_ветки> -> стягиваем изменения с удаленного репозитория, с указанной ветки (добавить в гокальные файлы изменения с github)
# git clone <ссылка_на_удаленный_репозиторий> -> склонировать/скопировать/скачать удаленный репозиторий  
'''привет'''



решаем 
conflict

